//bullet.cpp

#include "bullet.h"
#include <dxlib.h>
#include "player.h"
#include "enemy.h"
#include "dxlib_wrapper.h"
#include <exception>
#include "concrete_bullet.h"

gp::smart_ptr<MyGameProject::Bullet> MyGameProject::Bullet::create
(
	const std::string& _name,
	const Enemy& _master,
	const Player& _player,
	const Point2D& _initial_pos,
	Real _initial_angle,
	Behavior _behavior
)
{
	if (_name == "Typical"){ return gp::make_smart<Typical>(_master,_player,_initial_pos,_initial_angle,_behavior); }
	else{ throw std::runtime_error("Undefined type of bullet."); }
}

MyGameProject::Bullet::Bullet
(
	const Enemy& _master,
	const Player& _player,
	const Point2D& _initial_pos,
	Real _initial_angle,
	const Shape& _hitbox_shape,
	Behavior _behavior
)
: HitableObject(HitBox(_hitbox_shape, PhysicalState(_initial_angle, _initial_pos))),
MovingObject(_initial_pos),
player(_player),
master(_master),
count(0),
behavior(_behavior)
{}

void MyGameProject::Bullet::update(void)
{
	behavior(*this);
	custom_updater();
	area().get_physical_state().p = pos();
	++count;
}

int MyGameProject::Bullet::get_count(void) const
{
	return count;
}

MyGameProject::Real MyGameProject::Bullet::angle(void) const
{
	return ang;
}

void MyGameProject::Bullet::angle(Real _ang)
{
	ang = _ang;
}

const Enemy& get_master_ref(void) const;
const Player& get_player_ref(void) const;


MyGameProject::Bullet::~Bullet(void){}
